import inquirer #
import json #
import requests #
import os #
import uuid #
import termcharts #
import pyfiglet #
import random #
import termcharts.bar_chart
from datetime import datetime, timedelta
from tabulate import tabulate
from collections import defaultdict
from colorama import Fore, Back, Style, init
# 
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.text import Text
# -*- coding: utf-8 -*-

# ================================================================================
# Dictionary to store expenses
expenses = {} # m·ª•c chi ti√™u
savings = {} # m·ª•c ti·∫øt ki·ªám
console = Console()

# t√≠nh gi·ªù ƒë·ªÉ ch√†o s√°ng, chi·ªÅu ,t·ªëi
current_time = datetime.now()
dt_string = current_time.strftime("%H:%M:%S")
current_hour = current_time.hour

# Kh·ªüi t·∫°o Colorama
init(autoreset=True)

chitieu = 'Chitieu.json' 
menu_file = "menu.json"
savings_file = 'saving.json'

# L∆∞u file chi ti√™u v√† ti·∫øt ki·ªám c√πng m·ªôt file json
def save_expenses():
    with open('./json/' + chitieu, 'w', encoding='utf-8') as f:
        json.dump({"expenses": expenses, "savings": savings}, f, indent=4, ensure_ascii=False)

# T·∫£i file chi ti√™u
def load_expenses():
    global expenses, savings
    try:
        with open('./json/' + chitieu, 'r', encoding='utf-8') as f:
            data = json.load(f)
            expenses = data.get("expenses", {})
            savings = data.get("savings", {})
    except FileNotFoundError:
        expenses = {}
        savings = {}

# Load expenses when the script starts
load_expenses()

# ƒê·ªçc file menu kinh doanh
# Load menu from JSON file
def load_menu():
    try:
        with open('./json/'+ menu_file, "r", encoding='utf-8') as f:
            menu = json.load(f)
    except FileNotFoundError:
        menu = {}
    return menu

# Save menu to JSON file
def save_menu(menu):
    with open('./json/'+ menu_file, "w" , encoding='utf-8') as f:
        json.dump(menu, f, indent=4)


# In ra l·ªùi ch√†o ƒë·∫ßu 
art = pyfiglet.figlet_format('Zero Spending', font='standard')
dateTimes = pyfiglet.figlet_format(dt_string, font='banner3')
colors = [Fore.LIGHTRED_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTCYAN_EX, Fore.LIGHTWHITE_EX]

# Check gi·ªù ƒë·ªÉ in l·ªùi ch√†o s√°ng, chi·ªÅu, t·ªëi
def get_greeting():
    if 5 <= current_hour < 12:
        return 'Ch√†o bu·ªïi s√°ng, ch√∫c b·∫°n bu·ªïi s√°ng t·ªët l√†nh! üòÜ'
    elif 12 <= current_hour < 18:
        return 'Ch√†o bu·ªïi chi·ªÅu, ch√∫c b·∫°n bu·ªïi chi·ªÅu vui v·∫ª! üòÅ'
    else:
        return 'Ch√†o bu·ªïi t·ªëi, ch√∫c b·∫°n bu·ªïi t·ªëi th∆∞ gi√£n! üòÆ‚Äçüí®'
#  in =

colored_line = ''.join(random.choice(colors) + '=' for _ in range(68))
end_line = ''.join(random.choice(colors) + '*' for _ in range(68))

print(colored_line)

# In t·ª´ng k√Ω t·ª± c·ªßa ch·ªØ ngh·ªá thu·∫≠t v·ªõi m√†u ng·∫´u nhi√™n
print(Style.BRIGHT + art)
print(dateTimes)
# In d√≤ng cu·ªëi c√πng v·ªõi m√†u ng·∫´u nhi√™n
print(colored_line)
# In ra l·ªùi ch√†o
print(get_greeting(), Fore.CYAN + dt_string + '\n')

# D·ª± b√°o th·ªùi ti·∫øt ho·∫∑c c√°i g√¨ ƒë√≥ ƒë·∫°i lo·∫°i v·∫≠y 
# ==============================

# Menu cho ng∆∞·ªùi d√πng ch·ªçn ch·ª©c nƒÉng
def main_menu():
    while True:
        # Menu ch√≠nh ƒë·ªÉ ch·ªçn nh√≥m ch·ª©c nƒÉng
        main_choices = [
            "üí≤ Kinh doanh",
            "üíµ Ki·ªÉm so√°t chi ti√™u",
            #ü™ô "Gi√° v√†ng",
            "üëõ Ti·∫øt ki·ªám",
            #‚òÅÔ∏è "Th·ªùi ti·∫øt",
            "‚ùå Tho√°t"
        ]

        main_questions = [
            inquirer.List(
                'main_choice',
                message= 5*'*' + " Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën th·ª±c hi·ªán "  + 5*'*',
                choices=main_choices,
            )
        ]

        main_answer = inquirer.prompt(main_questions)

        if main_answer['main_choice'] == "üí≤ Kinh doanh":
            business_menu()
        elif main_answer['main_choice'] == "üíµ Ki·ªÉm so√°t chi ti√™u":
            expense_menu()
        elif main_answer['main_choice'] == "üëõ Ti·∫øt ki·ªám":
            savings_menu()  
        elif main_answer['main_choice'] == "‚ùå Tho√°t":
            print(end_line)
            print(10*'=' + " | C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh! | " + 10*'=')
            print(end_line + '\n')
            break

def business_menu():
    while True:
        business_choices = [
            "Th√™m s·∫£n ph·∫©m v√†o menu",
            "Th√™m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m",
            "Xem menu s·∫£n ph·∫©m",
            "Ghi nh·∫≠n b√°n h√†ng",
            "Th·ªëng k√™ doanh thu",
            "Quay l·∫°i"
        ]

        business_questions = [
            inquirer.List(
                'choice',
                message= 5*'*' + " Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën th·ª±c hi·ªán "  + 5*'*',
                choices=business_choices,
            )
        ]

        business_answer = inquirer.prompt(business_questions)

        if business_answer['choice'] == "Th√™m s·∫£n ph·∫©m v√†o menu":
            print(40*'=*=')
            add_product()
        elif business_answer['choice'] == "Th√™m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m":
            print(40*'=*=')
            add_stock()
        elif business_answer['choice'] == "Xem menu s·∫£n ph·∫©m":
            print(40*'=*=')
            view_menu()
        elif business_answer['choice'] == "Ghi nh·∫≠n b√°n h√†ng":
            print(40*'=*=')
            record_sale()
        elif business_answer['choice'] == "Th·ªëng k√™ doanh thu":
            print(40*'=*=')
            view_sales_statistics()
        elif business_answer['choice'] == "Quay l·∫°i":
            break

# Menu ti·∫øt ki·ªám
def savings_menu():
    while True:
        savings_choices = [
            "Th√™m ti·ªÅn ti·∫øt ki·ªám",
            "S·ª≠ d·ª•ng ti·ªÅn ti·∫øt ki·ªám",
            "Xem t·ªïng ti·ªÅn ti·∫øt ki·ªám",
            "C·∫≠p nh·∫≠t ti·ªÅn ti·∫øt ki·ªám",
            "Quay l·∫°i"
        ]

        savings_questions = [
            inquirer.List(
                'savings_choice',
                message=5 * '*' + " Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën th·ª±c hi·ªán " + 5 * '*',
                choices=savings_choices,
            )
        ]

        savings_answer = inquirer.prompt(savings_questions)

        if savings_answer['savings_choice'] == "Th√™m ti·ªÅn ti·∫øt ki·ªám":
            amount = int(input("Nh·∫≠p s·ªë ti·ªÅn ti·∫øt ki·ªám (VNƒê): "))
            add_savings(amount)

        elif savings_answer['savings_choice'] == "S·ª≠ d·ª•ng ti·ªÅn ti·∫øt ki·ªám":
            apply_savings()

        elif savings_answer['savings_choice'] == "Xem t·ªïng ti·ªÅn ti·∫øt ki·ªám":
            display_savings_book()

        elif savings_answer['savings_choice'] == "C·∫≠p nh·∫≠t ti·ªÅn ti·∫øt ki·ªám":
            update_savings()

        elif savings_answer['savings_choice'] == "Quay l·∫°i":
            break

def expense_menu():
    while True:
        expense_choices = [
            "Th√™m chi ti√™u",
            "Xem chi ti√™u",
            "Xem chi ti√™u theo nƒÉm",
            "Xem chi ti√™u theo danh m·ª•c",
            "Quay l·∫°i"
        ]

        expense_questions = [
            inquirer.List(
                'choice',
                message="Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën th·ª±c hi·ªán",
                choices=expense_choices,
            )
        ]

        expense_answer = inquirer.prompt(expense_questions)

        if expense_answer['choice'] == "Th√™m chi ti√™u":
            print(40 * '=*=')
            add_expense()
        elif expense_answer['choice'] == "Xem chi ti√™u":
            print(40 * '=*=')
            view_expenses_menu()
        elif expense_answer['choice'] == "Xem chi ti√™u theo nƒÉm":
            print(40 * '=*=')
            select_yearly_expenses()
        elif expense_answer['choice'] == "Xem chi ti√™u theo danh m·ª•c":
            print(40 * '=*=')
            view_expenses_by_category()

        elif expense_answer['choice'] == "Quay l·∫°i":
            break

def view_expenses_menu():
    while True:
        view_expense_choices = [
            "Xem chi ti√™u tu·∫ßn",
            "Xem chi ti√™u th√°ng",
            "Xem chi ti√™u nƒÉm",
            "Quay l·∫°i"
        ]

        view_expense_questions = [
            inquirer.List(
                'choice',
                message="Ch·ªçn kho·∫£ng th·ªùi gian b·∫°n mu·ªën xem chi ti√™u",
                choices=view_expense_choices,
            )
        ]

        view_expense_answer = inquirer.prompt(view_expense_questions)

        if view_expense_answer['choice'] == "Xem chi ti√™u tu·∫ßn":
            print(40 * '=*=')
            weekly_expenses()

        elif view_expense_answer['choice'] == "Xem chi ti√™u th√°ng":
            print(40 * '=*=')
            monthly_expenses()

        elif view_expense_answer['choice'] == "Xem chi ti√™u nƒÉm":
            print(40 * '=*=')
            yearly_expenses()

        elif view_expense_answer['choice'] == "Quay l·∫°i":
            break

# Menu categories
categories = {
    "Chi ti√™u thi·∫øt y·∫øu": [
        "ƒêi ch·ª£ si√™u th·ªã", "Nh√† h√†ng", "Chi tr·∫£ h√≥a ƒë∆°n", "Ti·ªÅn nh√†", "ƒêi l·∫°i", "Gi√∫p vi·ªác", "Kh√°c"
    ],
    "Mua s·∫Øm gi·∫£i tr√≠": [
        "Vui ch∆°i gi·∫£i tr√≠", "Mua s·∫Øm", 'ƒê·ªì gia d·ª•ng', "L√†m ƒë·∫πp th·ªÉ thao", "Kh√°c"
    ],
    "Gi√°o d·ª•c v√† y t·∫ø": [
        "Gi√°o d·ª•c", "Y t·∫ø", "B·∫£o hi·ªÉm", "Kh√°c"
    ],
    "Ti·∫øt ki·ªám": [
        "Ti·∫øt ki·ªám"
    ],
    "ƒê·∫ßu t∆∞": [
        "S·ª± ki·ªán", "Ch·ª©ng kho√°n", "B·∫•t ƒë·ªông s·∫£n", "Qu·ªπ", "Kh√°c"
    ],
    "Chi kh√°c": [
        "Bi·∫øu t·∫∑ng", "D·ªãch v·ª• c√¥ng", "Kh√°c"
    ],
    "Ti·ªÅn vay": [
       "Ti·ªÅn vay"  ,"Kh√°c"
    ]
}

# Chuy·ªÉn ƒë·ªïi ng√†y Anh -> Vi·ªát
weekday_translation = {
    "Monday": "Th·ª© Hai",
    "Tuesday": "Th·ª© Ba",
    "Wednesday": "Th·ª© T∆∞",
    "Thursday": "Th·ª© NƒÉm",
    "Friday": "Th·ª© S√°u",
    "Saturday": "Th·ª© B·∫£y",
    "Sunday": "Ch·ªß Nh·∫≠t"
}

# Function to add savings
def add_savings(amount):
    today = datetime.now()
    date = today.strftime('%Y-%m-%d')
    weekday_name = today.strftime('%A')  # L·∫•y t√™n th·ª© (v√≠ d·ª•: "Monday")

    # Ki·ªÉm tra n·∫øu ng√†y h√¥m nay ch∆∞a c√≥ trong savings
    if date not in savings:
        savings[date] = {"amount": 0, "weekday": weekday_translation.get(weekday_name)}
    
    # C·ªông s·ªë ti·ªÅn ti·∫øt ki·ªám v√†o ng√†y hi·ªán t·∫°i
    savings[date]["amount"] += amount

    # L∆∞u d·ªØ li·ªáu
    save_expenses()

    # Th√¥ng b√°o cho ng∆∞·ªùi d√πng  
    print(display_savings_book())
    print(Fore.GREEN + f"ƒê√£ th√™m ti·∫øt ki·ªám: {amount:,} VNƒê v√†o ng√†y {date} ({weekday_translation.get(weekday_name)}) \n" + Style.RESET_ALL)

# C·∫≠p nh·∫≠t ti·ªÅn ti·∫øt ki·ªám
def update_savings():
    if not savings:
        print(Fore.RED + "Kh√¥ng c√≥ ti·ªÅn ti·∫øt ki·ªám n√†o ƒë·ªÉ c·∫≠p nh·∫≠t." + Style.RESET_ALL)
        return

    # In danh s√°ch c√°c ng√†y c√≥ trong savings ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
    dates = list(savings.keys())
    date_question = [
        inquirer.List(
            'selected_date',
            message="Ch·ªçn ng√†y b·∫°n mu·ªën c·∫≠p nh·∫≠t s·ªë ti·ªÅn ti·∫øt ki·ªám:",
            choices=dates,
        )
    ]

    date_answer = inquirer.prompt(date_question)
    selected_date = date_answer['selected_date']

    # L·∫•y s·ªë ti·ªÅn m·ªõi t·ª´ ng∆∞·ªùi d√πng
    new_amount = int(input(f"Nh·∫≠p s·ªë ti·ªÅn ti·∫øt ki·ªám m·ªõi cho ng√†y {selected_date} (VNƒê): "))

    # C·∫≠p nh·∫≠t s·ªë ti·ªÅn ti·∫øt ki·ªám
    savings[selected_date]["amount"] = new_amount

    # L∆∞u l·∫°i thay ƒë·ªïi
    save_expenses()

    print(Fore.GREEN + f"S·ªë ti·ªÅn ti·∫øt ki·ªám cho ng√†y {selected_date} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh {new_amount:,} VNƒê." + Style.RESET_ALL)

# Function to apply savings to current expenses
def apply_savings():
    if not savings:
        print(Fore.RED + "Kh√¥ng c√≥ ti·ªÅn ti·∫øt ki·ªám n√†o ƒë·ªÉ s·ª≠ d·ª•ng." + Style.RESET_ALL)
        return

    date = input("Nh·∫≠p ng√†y c·ªßa kho·∫£n ti·∫øt ki·ªám c·∫ßn s·ª≠ d·ª•ng (YYYY-MM-DD): ")
    if date not in savings:
        print(Fore.RED + "Ng√†y ti·∫øt ki·ªám kh√¥ng h·ª£p l·ªá." + Style.RESET_ALL)
        return
    
    amount = int(input("Nh·∫≠p s·ªë ti·ªÅn c·∫ßn s·ª≠ d·ª•ng (VNƒê): "))
    if amount > savings[date]["amount"]:
        print(Fore.RED + "S·ªë ti·ªÅn y√™u c·∫ßu v∆∞·ª£t qu√° s·ªë ti·ªÅn ti·∫øt ki·ªám hi·ªán c√≥." + Style.RESET_ALL)
        return
    
    # Deduct savings and add to expenses
    # Tr∆∞·ªõc khi th·ª±c hi·ªán ƒëi·ªÅu n√†y, g·ªçi h√†m add_expense_from_savings
 
    add_expense_from_savings(amount, "Chi ti√™u t·ª´ ti·∫øt ki·ªám")

# Function to add an expense directly from savings
def get_savings_balance():
    today = datetime.now().strftime('%Y-%m-%d')
    return savings.get(today, {"amount": 0})["amount"]

def update_savings_balance(amount_spent):
    today = datetime.now().strftime('%Y-%m-%d')
    if today in savings:
        savings[today]["amount"] -= amount_spent
        if savings[today]["amount"] <= 0:
            del savings[today]  # X√≥a ng√†y n·∫øu s·ªë d∆∞ kh√¥ng c√≤n
    else:
        print(Fore.RED + "Kh√¥ng c√≥ s·ªë d∆∞ ti·∫øt ki·ªám cho ng√†y h√¥m nay!" + Style.RESET_ALL)

def add_expense_from_savings(amount, category):
    savings_balance = get_savings_balance()
    
    if amount > savings_balance:
        print(Fore.RED + "S·ªë ti·ªÅn chi ti√™u v∆∞·ª£t qu√° s·ªë d∆∞ ti·∫øt ki·ªám hi·ªán c√≥!" + Style.RESET_ALL)
        return
    
    # Th·ª±c hi·ªán chi ti√™u t·ª´ ti·∫øt ki·ªám
    # Gi·∫£m s·ªë d∆∞ ti·∫øt ki·ªám tr∆∞·ªõc khi th√™m chi ti√™u
    update_savings_balance(amount)

    # Ti·∫øn h√†nh th√™m chi ti√™u
    while True:
        add_expense(amount, category)
        
        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën x√°c nh·∫≠n chi ti√™u kh√¥ng
        confirm_question = [
            inquirer.Confirm('confirm', message="B·∫°n c√≥ mu·ªën x√°c nh·∫≠n chi ti√™u n√†y kh√¥ng?", default=True)
        ]
        confirm_answer = inquirer.prompt(confirm_question)

        if confirm_answer['confirm']:
            print(Fore.GREEN + f"Chi ti√™u ƒë∆∞·ª£c x√°c nh·∫≠n. ƒê√£ tr·ª´ {amount:,} VNƒê t·ª´ s·ªë d∆∞ ti·∫øt ki·ªám." + Style.RESET_ALL)
            break
        else:
            # N·∫øu kh√¥ng x√°c nh·∫≠n, kh√¥i ph·ª•c s·ªë d∆∞ ti·∫øt ki·ªám
            print(Fore.YELLOW + "Chi ti√™u ƒë√£ b·ªã h·ªßy. Kh√¥ng tr·ª´ s·ªë ti·ªÅn t·ª´ s·ªë d∆∞ ti·∫øt ki·ªám." + Style.RESET_ALL)
            # Ho√†n l·∫°i s·ªë ti·ªÅn v√†o s·ªë d∆∞ ti·∫øt ki·ªám
            add_savings(amount)
            break

def display_savings_book():
    if not savings:
        print(Fore.RED + "Kh√¥ng c√≥ d·ªØ li·ªáu ti·∫øt ki·ªám ƒë·ªÉ hi·ªÉn th·ªã." + Style.RESET_ALL)
        return
    
    table_data = []
    
    # Th√™m ti√™u ƒë·ªÅ b·∫£ng
    headers = [Fore.CYAN + "Ng√†y" + Style.RESET_ALL, 
               Fore.CYAN + "S·ªë Ti·ªÅn (VNƒê)" + Style.RESET_ALL, 
               Fore.CYAN + "Ng√†y Trong Tu·∫ßn" + Style.RESET_ALL]

    total_amount = 0
    
    for date, details in savings.items():
        table_data.append([
            date,
            f"{details['amount']:,}",
            details['weekday']
        ])
        total_amount += details['amount']

    # In b·∫£ng ra v·ªõi m√†u s·∫Øc
    print(Fore.GREEN + tabulate(table_data, headers=headers, tablefmt="rounded_outline") + Style.RESET_ALL)
    
    # In t·ªïng s·ªë ti·ªÅn
    print(Fore.YELLOW + f"T·ªïng ti·ªÅn ti·∫øt ki·ªám: {total_amount:,} VNƒê" + Style.RESET_ALL)

# In ra b·∫£ng chi ti√™u t·∫•t c·∫£ c√°c m·ª•c ƒëi·ªÅu s·ª≠ d·ª•ng b·∫£ng n√†y
def format_expenses_table(expenses_list):
    if not expenses_list:
        return "Kh√¥ng c√≥ chi ti√™u n√†o trong kho·∫£ng th·ªùi gian n√†y."

    # Ti√™u ƒë·ªÅ t·ª´ng h√†ng
    headers = ["STT", "Ng√†y", "Th·ª© trong tu·∫ßn", "Danh m·ª•c", "M√¥ t·∫£", "ƒê∆°n gi√° (VNƒê)", "S·ªë l∆∞·ª£ng", "S·ªë ti·ªÅn (VNƒê)"]
    table = []

    # Chi ti·∫øt danh s√°ch t·ª´ng h√†ng
    total_expense = 0
    for idx, expense in enumerate(expenses_list, start=1):
        date = expense['date']
        date_obj = datetime.strptime(date, "%Y-%m-%d")
        weekday_name = date_obj.strftime('%A')  # L·∫•y t√™n ng√†y trong tu·∫ßn (v√≠ d·ª•: Monday)
        weekday_vn = weekday_translation.get(weekday_name, weekday_name)  # D·ªãch sang ti·∫øng Vi·ªát
        
        category = expense['category']
        description = expense['description']
        quantity = expense['quantity']
        amount = expense['amount']
        
        unit_price = amount / quantity  # T√≠nh gi√° g·ªëc
        total_expense += amount
        
        table.append([idx, date, weekday_vn, category, description, f"{unit_price:,.0f}", quantity, f"{amount:,.0f}"])
    
    table.append(["", "T·ªïng chi ti√™u", "****", "****", "****", "****", "****", f"{total_expense:,} VNƒê"])
    
    table_str = tabulate(table, headers=headers, tablefmt='rounded_outline')

    # √Åp d·ª•ng m√†u s·∫Øc
    table_str_colored = table_str.replace(
        'STT', Fore.LIGHTMAGENTA_EX + 'STT' + Style.RESET_ALL
    ).replace(
        'Ng√†y', Fore.MAGENTA + 'Ng√†y' + Style.RESET_ALL
    ).replace(
        'Th·ª© trong tu·∫ßn', Fore.BLUE + 'Th·ª© trong tu·∫ßn' + Style.RESET_ALL
    ).replace(
        'Danh m·ª•c', Fore.CYAN + 'Danh m·ª•c' + Style.RESET_ALL
    ).replace(
        'M√¥ t·∫£', Fore.YELLOW + 'M√¥ t·∫£' + Style.RESET_ALL
    ).replace(
        'ƒê∆°n gi√° (VNƒê)', Fore.GREEN + 'ƒê∆°n gi√° (VNƒê)' + Style.RESET_ALL
    ).replace(
        'S·ªë l∆∞·ª£ng', Fore.CYAN + 'S·ªë l∆∞·ª£ng' + Style.RESET_ALL
    ).replace(
        'S·ªë ti·ªÅn (VNƒê)', Fore.GREEN + 'S·ªë ti·ªÅn (VNƒê)' + Style.RESET_ALL
    ).replace(
        'T·ªïng chi ti√™u', Fore.GREEN + 'T·ªïng chi ti√™u' + Style.RESET_ALL
    )

    return table_str_colored

# ==========================================================

# Ph·∫ßn th·ªëng k√™ t√¨m k·∫ø doanh m·ª•c ƒë√£ chi ti√™u ri√™ng l·∫ª
def list_categories_with_expenses():
    categories = set()
    for user_expenses in expenses.values():  # L·∫∑p qua t·ª´ng ng∆∞·ªùi d√πng
        for date_str, items in user_expenses.items():  # L·∫∑p qua t·ª´ng ng√†y
            if isinstance(items, list):
                for item in items:
                    if isinstance(item, dict) and 'category' in item:
                        categories.add(item['category'])
    return list(categories)

# T√¨m ki·∫øm danh m·ª•c ƒë√£ chi ti√™u 
def view_expenses_by_category():
    categories = list_categories_with_expenses()
    
    if not categories:
        print("Kh√¥ng c√≥ danh m·ª•c chi ti√™u n√†o.")
        return

    # Hi·ªÉn th·ªã danh s√°ch danh m·ª•c ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn
    category_question = [
        inquirer.List(
            'category',
            message="Ch·ªçn danh m·ª•c ƒë·ªÉ xem chi ti·∫øt",
            choices=categories + ["Quay l·∫°i"]
        )
    ]

    category_answer = inquirer.prompt(category_question)
    selected_category = category_answer['category']

    if selected_category == "Quay l·∫°i":
        return

    print(f"Chi ti√™u cho danh m·ª•c: {selected_category}")

    total_amount = 0
    count = 0
    filtered_expenses = []

    for user_expenses in expenses.values():
        for date_str, items in user_expenses.items():
            if isinstance(items, list):
                for item in items:
                    if isinstance(item, dict) and 'category' in item:
                        if item['category'].lower() == selected_category.lower():
                            count += 1
                            total_amount += item['amount']
                            item['date'] = date_str  # Th√™m ng√†y v√†o t·ª´ng m·ª•c chi ti√™u
                            filtered_expenses.append(item)

    print(f"ƒê√£ chi ti√™u {count} l·∫ßn v·ªõi t·ªïng s·ªë ti·ªÅn l√† {total_amount:,} VNƒê cho danh m·ª•c '{selected_category}'.")

    # Hi·ªÉn th·ªã chi ti·∫øt c√°c chi ti√™u cho danh m·ª•c ƒë√£ ch·ªçn
    formatted_table = format_expenses_table(filtered_expenses)
    print(formatted_table)


# Xem chi ti√™u theo nƒÉm
def select_yearly_expenses():
    # L·∫•y danh s√°ch c√°c nƒÉm t·ª´ file JSON
    years = set()
    for user_expenses in expenses.values():
        for date_str in user_expenses.keys():
            year = datetime.strptime(date_str, "%Y-%m-%d").year
            years.add(year)

    if not years:
        print("Kh√¥ng c√≥ chi ti√™u n√†o trong file.")
        return

    years = sorted(years, reverse=True)  # S·∫Øp x·∫øp c√°c nƒÉm theo th·ª© t·ª± gi·∫£m d·∫ßn

    # S·ª≠ d·ª•ng Inquirer ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn nƒÉm
    year_choices = [str(year) for year in years] + ["Quay l·∫°i"]
    year_question = [
        inquirer.List(
            'selected_year',
            message="Ch·ªçn nƒÉm b·∫°n mu·ªën xem chi ti√™u:",
            choices=year_choices,
        )
    ]

    year_answer = inquirer.prompt(year_question)
    selected_year = year_answer['selected_year']

    if selected_year == "Quay l·∫°i":
        return

    print(40 * '=*=')
    yearly_expenses(int(selected_year))
    
def plot_expenses(categories, amounts, title):
    # T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    data = dict(zip(categories, amounts))
    
    # S·∫Øp x·∫øp d·ªØ li·ªáu theo th·ª© t·ª± danh m·ª•c
    sorted_categories = sorted(data.keys())
    sorted_amounts = [data[cat] for cat in sorted_categories]
    
    # V·∫Ω bi·ªÉu ƒë·ªì d·∫°ng bar chart
    try:
        # T·∫°o bi·ªÉu ƒë·ªì c·ªôt n·∫±m nghi√™n
        # bar_chart = termcharts.bar(
        #     dict(zip(sorted_categories, sorted_amounts)),
        #     title=title,
        # )  
        
        # Bi·ªÉu ƒë·ªì pie chart
        pie_chart = termcharts.pie(
            dict(zip(sorted_categories, sorted_amounts)),
            title=title,
        )

        # In bi·ªÉu ƒë·ªì 
        table = Table(title="Danh s√°ch chi ti√™u")
        table.add_column("Danh m·ª•c", style="cyan", no_wrap=True)
        table.add_column("S·ªë ti·ªÅn (VNƒê)", style="magenta")

        for category, amount in zip(sorted_categories, sorted_amounts):
            table.add_row(category, f"[bold green]{amount:,}[/bold green] VNƒê")
        
        # In b·∫£ng d·ªØ li·ªáu
        console.print(table)

         # ==============================================
        # T·∫°o bi·ªÉu ƒë·ªì d·∫°ng thanh
        console.print("\n" + title, style="bold underline")
        max_length = 50  # ƒê·ªô d√†i t·ªëi ƒëa c·ªßa thanh

        # S·∫Øp x·∫øp c√°c h·∫°ng m·ª•c v√† s·ªë ti·ªÅn chi ti√™u t·ª´ nh·ªè ƒë·∫øn l·ªõn
        sorted_items = sorted(zip(sorted_categories, sorted_amounts), key=lambda x: x[1])

        # T√°ch l·∫°i danh s√°ch sau khi s·∫Øp x·∫øp
        sorted_categories, sorted_amounts = zip(*sorted_items)

        max_amount = max(sorted_amounts) if sorted_amounts else 1
        console.print("\nBi·ªÉu ƒë·ªì Thanh:")
        for category, amount in zip(sorted_categories, sorted_amounts):
            bar_length = int(amount / max_amount * max_length)
            bar = "‚ñà" * bar_length
            bar = f"[bold orange1]{bar.ljust(max_length)}[/bold orange1]"  # Trang tr√≠ thanh bi·ªÉu ƒë·ªì
            console.print(f"{category.ljust(20)} | {bar} [bold green]{amount:,} [/bold green][bold orchid]VNƒê [/bold orchid]")

        # ==============================================
        print(pie_chart)
        console.print("\nBi·ªÉu ƒë·ªì tr√≤n:")
        total_amount = sum(sorted_amounts)
        pie_chart_text = ""
        for category, amount in zip(sorted_categories, sorted_amounts):
            percentage = (amount / total_amount) * 100
            pie_chart_text += f"[bold bright_magenta]{category}:[/bold bright_magenta] [bold green]{amount:,} VNƒê [/bold green] ({percentage:.2f}%)\n"
        console.print(pie_chart_text)

        # T·∫°o d·ªØ li·ªáu cho b·∫£ng
        table_data = [[category, f"{amount:,} VNƒê"] for category, amount in data.items()]

        # In b·∫£ng
        print(f"\nDanh s√°ch chi ti√™u:")
        print(tabulate(table_data, headers=["Danh m·ª•c", "S·ªë ti·ªÅn (VNƒê)"], tablefmt='rounded_grid'))

    except TypeError as e:
        print(f"Error generating charts: {e}")

# Th√™m chi ti√™u 
def add_expense():
    while True:
        questions = [
            inquirer.List(
                'main_category',
                message="Ch·ªçn lo·∫°i chi ti√™u:",
                choices=list(categories.keys()) + ["B·ªè qua"],
            ),
        ]
        answers = inquirer.prompt(questions)

        if answers['main_category'] == "B·ªè qua":
            print("ƒê√£ h·ªßy th√™m chi ti√™u.")
            return

        # Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c tr∆∞·ªùng nh·∫≠p v√†o
        sub_answers = {
            'subcategory': '',
            'description': '',
            'amount': '',
            'quantity': '1'
        }

        while True:
            # N·∫øu c√°c tr∆∞·ªùng ƒë√£ c√≥ gi√° tr·ªã, s·ª≠ d·ª•ng ch√∫ng l√†m m·∫∑c ƒë·ªãnh
            sub_questions = [
                inquirer.List(
                    'subcategory',
                    message="Ch·ªçn chi ti√™u c·ª• th·ªÉ:",
                    choices=categories[answers['main_category']] + ["B·ªè qua"],
                    default=sub_answers['subcategory']  # Gi·ªØ l·∫°i gi√° tr·ªã ƒë√£ nh·∫≠p
                ),
                inquirer.Text('description', message="M√¥ t·∫£ chi ti√™u", default=sub_answers['description']),  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                inquirer.Text('amount', message="S·ªë ti·ªÅn (VNƒê)", default=sub_answers['amount'], validate=lambda _, x: x.isdigit() or x == ""),
                inquirer.Text('quantity', message="S·ªë l∆∞·ª£ng", default=sub_answers['quantity'], validate=lambda _, x: x.isdigit())
            ]

            sub_answers = inquirer.prompt(sub_questions)

            if sub_answers['subcategory'] == "B·ªè qua":
                print("ƒê√£ h·ªßy th√™m chi ti√™u.")
                return

            # T√≠nh to√°n t·ªïng ti·ªÅn
            total_amount = int(sub_answers['amount']) * int(sub_answers['quantity'])

            # T·∫°o d·ªØ li·ªáu cho b·∫£ng
            table_data = [
                [Fore.CYAN + "Lo·∫°i chi ti√™u" + Style.RESET_ALL, sub_answers['subcategory']],
                [Fore.CYAN + "M√¥ t·∫£" + Style.RESET_ALL, sub_answers['description']],
                [Fore.CYAN + "S·ªë l∆∞·ª£ng" + Style.RESET_ALL, sub_answers['quantity']],
                [Fore.CYAN + "T·ªïng ti·ªÅn (VNƒê)" + Style.RESET_ALL, f"{total_amount:,}"]
            ]

            # In b·∫£ng ra v·ªõi m√†u s·∫Øc
            print(Fore.GREEN + tabulate(table_data, headers=["Th√¥ng tin", "Chi ti·∫øt"], tablefmt="rounded_outline") + Style.RESET_ALL)

            # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ch·ªânh s·ª≠a chi ti√™u n√†y kh√¥ng
            edit_question = [
                inquirer.List(
                    'edit',
                    message="B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a chi ti√™u n√†y kh√¥ng?",
                    choices=["X√°c nh·∫≠n", "C·∫≠p nh·∫≠t", "H·ªßy"],
                )
            ]
            edit_answer = inquirer.prompt(edit_question)

            if edit_answer['edit'] == "X√°c nh·∫≠n":
                break  # Tho√°t kh·ªèi v√≤ng l·∫∑p ch·ªânh s·ª≠a v√† ti·∫øp t·ª•c x√°c nh·∫≠n
            elif edit_answer['edit'] == "H·ªßy":
                print("ƒê√£ h·ªßy chi ti√™u n√†y.")
                return

            # N·∫øu ng∆∞·ªùi d√πng ch·ªçn ch·ªânh s·ª≠a, s·∫Ω quay l·∫°i v√† gi·ªØ c√°c gi√° tr·ªã v·ª´a nh·∫≠p ƒë·ªÉ ch·ªânh s·ª≠a ti·∫øp

        # Sau khi x√°c nh·∫≠n, l∆∞u chi ti√™u
        today = datetime.now()
        date = today.strftime('%Y-%m-%d')
        weekday_name = today.strftime('%A')  # L·∫•y t√™n th·ª© trong tu·∫ßn
        weekday_name_vn = weekday_translation.get(weekday_name, weekday_name)  # D·ªãch sang ti·∫øng Vi·ªát

        user = "TranPhuocThien-2003"  # Gi·∫£ ƒë·ªãnh ID ng∆∞·ªùi d√πng

        if user not in expenses:
            expenses[user] = {}
        if date not in expenses[user]:
            expenses[user][date] = []

        expense_id = str(uuid.uuid4())  # T·∫°o ID duy nh·∫•t cho m·ªói chi ti√™u

        expenses[user][date].append({
            "id": expense_id,
            "category": sub_answers['subcategory'],
            "description": sub_answers['description'],
            "amount": total_amount,
            "quantity": int(sub_answers['quantity']),
            "weekday": weekday_name_vn  # Th√™m t√™n th·ª© v√†o th√¥ng tin chi ti√™u
        })

        save_expenses()
        print(Fore.YELLOW + f"ƒê√£ th√™m chi ti√™u: {sub_answers['subcategory']} - {sub_answers['description']} - S·ªë l∆∞·ª£ng: {sub_answers['quantity']} - T·ªïng ti·ªÅn: {total_amount:,} VNƒê - Ng√†y: {weekday_name_vn}" + Style.RESET_ALL)

        # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën th√™m chi ti√™u kh√°c trong c√πng danh m·ª•c
        continue_question = [
            inquirer.Confirm('continue', message="B·∫°n c√≥ mu·ªën th√™m chi ti√™u kh√°c trong c√πng danh m·ª•c kh√¥ng?", default=False)
        ]
        continue_answer = inquirer.prompt(continue_question)

        if not continue_answer['continue']:
            break  # Tho√°t kh·ªèi v√≤ng l·∫∑p danh m·ª•c con v√† quay l·∫°i menu ch√≠nh

    # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën quay l·∫°i menu ch√≠nh
    more_expense_question = [
        inquirer.Confirm('more', message="B·∫°n c√≥ mu·ªën quay l·∫°i menu ch√≠nh kh√¥ng?", default=True)
    ]
    more_expense_answer = inquirer.prompt(more_expense_question)

    if not more_expense_answer['more']:
        return


# T√≠nh chi√™u ti√™u trong tu·∫ßn
def weekly_expenses():
    today = datetime.now().date()
    start_of_week = today - timedelta(days=today.weekday())  # Monday
    end_of_week = start_of_week + timedelta(days=6)  # Sunday

    total_weekly = 0
    daily_spendings = [0] * 7  # Create a list with 7 zeros to hold daily spending
    weekly_expenses_list = []
    categories = []
    amounts = []

    # Prepare data to compare with the previous week
    last_week_start = start_of_week - timedelta(days=7)
    last_week_end = end_of_week - timedelta(days=7)
    last_week_expenses = {}
    total_last_week = 0

    for user_expenses in expenses.values():
        for date_str, items in user_expenses.items():
            date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()

            # Calculate expenses for the current week
            if start_of_week <= date_obj <= today:
                day_index = (date_obj - start_of_week).days  # Calculate the day index (0 for Monday, 6 for Sunday)
                for item in items:
                    total_weekly += item['amount']
                    daily_spendings[day_index] += item['amount']  # Add amount to the correct day
                    weekly_expenses_list.append({
                        'date': date_str,
                        'category': item['category'],
                        'description': item['description'],
                        'quantity': item['quantity'],
                        'amount': item['amount']
                    })
                    if item['category'] not in categories:
                        categories.append(item['category'])
                        amounts.append(item['amount'])
                    else:
                        index = categories.index(item['category'])
                        amounts[index] += item['amount']

            # Calculate expenses for the previous week
            if last_week_start <= date_obj <= last_week_end:
                for item in items:
                    total_last_week += item['amount']  # Add to the total for last week
                    if item['category'] not in last_week_expenses:
                        last_week_expenses[item['category']] = item['amount']
                    else:
                        last_week_expenses[item['category']] += item['amount']

    start_day_vn = weekday_translation.get(start_of_week.strftime('%A'), start_of_week.strftime('%A'))
    end_day_vn = weekday_translation.get(today.strftime('%A'), today.strftime('%A'))

    print(f"Chi ti√™u t·ª´ {start_day_vn} (ng√†y {start_of_week.strftime('%d/%m/%Y')}) ƒë·∫øn {end_day_vn} (ng√†y {today.strftime('%d/%m/%Y')}):")

    if weekly_expenses_list:
        print(format_expenses_table(weekly_expenses_list))
        plot_expenses(categories, amounts, 'Chi ti√™u trong tu·∫ßn')
        plot_weekly_comparison(4)
    else:
        print("Kh√¥ng c√≥ chi ti√™u n√†o trong tu·∫ßn n√†y.")
    
    # T√≠nh s·ªë chi ti√™u trong b√¨nh h·∫±ng ng√†y trong tu·∫•n
    days_in_week = (today - start_of_week).days + 1  # t·ªïng ng√†y trong tu·∫ßn (including today)
    average_daily_spending = total_weekly / days_in_week
    print(f"T·ªïng chi ti√™u tu·∫ßn n√†y: {total_weekly:,} VNƒê")
    print(Fore.LIGHTMAGENTA_EX + f"Chi ti√™u trung b√¨nh m·ªói ng√†y trong tu·∫ßn: {average_daily_spending:,.0f} VNƒê\n") 

    # So s√°nh chi ti√™u tu·∫ßn tr∆∞·ªõc
    difference = total_weekly - total_last_week
    if difference > 0:
        print(Fore.RED + f"B·∫°n ƒë√£ chi ti√™u nhi·ªÅu h∆°n tu·∫ßn tr∆∞·ªõc {difference:,} VNƒê.")
    elif difference < 0:
        print(Fore.GREEN + f"B·∫°n ƒë√£ chi ti√™u √≠t h∆°n tu·∫ßn tr∆∞·ªõc {abs(difference):,} VNƒê.")
    else:
        print(Fore.BLUE + "Chi ti√™u tu·∫ßn n√†y kh√¥ng ƒë·ªïi so v·ªõi tu·∫ßn tr∆∞·ªõc.")

    print(Fore.YELLOW + f"T·ªïng chi ti√™u tu·∫ßn tr∆∞·ªõc: {total_last_week:,} VNƒê\n")

def calculate_weekly_totals(num_weeks=4):
    today = datetime.now().date()
    weekly_totals = []
    week_labels = []

    for i in range(num_weeks):
        start_of_week = today - timedelta(days=today.weekday() + i * 7)
        end_of_week = start_of_week + timedelta(days=6)

        # X√°c ƒë·ªãnh tu·∫ßn th·ª© m·∫•y trong th√°ng
        week_of_month = (start_of_week.day - 1) // 7 + 1

        # N·∫øu tu·∫ßn n√†y n·∫±m trong th√°ng tr∆∞·ªõc, s·ª≠ d·ª•ng nh√£n th√°ng tr∆∞·ªõc
        if start_of_week.month != today.month:
            week_label = f"Tu·∫ßn {week_of_month} th√°ng {start_of_week.strftime('%m')}"
        else:
            week_label = f"Tu·∫ßn {week_of_month} th√°ng {start_of_week.strftime('%m')}"

        total_weekly = 0
        for user_expenses in expenses.values():
            for date_str, items in user_expenses.items():
                date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
                if start_of_week <= date_obj <= end_of_week:
                    for item in items:
                        total_weekly += item['amount']

        weekly_totals.append(total_weekly)
        week_labels.append(week_label)

    return weekly_totals[::-1], week_labels[::-1]  # ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ tu·∫ßn g·∫ßn nh·∫•t l√™n ƒë·∫ßu
def plot_weekly_comparison(num_weeks=4):
    weekly_totals, week_labels = calculate_weekly_totals(num_weeks)
    weekly_expenses = {label: [] for label in week_labels}

    today = datetime.now().date()
    current_week_label = week_labels[-1]  # L·∫•y nh√£n c·ªßa tu·∫ßn hi·ªán t·∫°i (tu·∫ßn ƒë·∫ßu ti√™n trong danh s√°ch sau khi ƒë·∫£o ng∆∞·ª£c)

    for i in range(num_weeks):
        start_of_week = today - timedelta(days=today.weekday() + i * 7)
        end_of_week = start_of_week + timedelta(days=6)

        for user_expenses in expenses.values():
            for date_str, items in user_expenses.items():
                date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
                if start_of_week <= date_obj <= end_of_week:
                    for item in items:
                        weekly_expenses[week_labels[i]].append({
                            'date': date_str,
                            'category': item['category'],
                            'description': item['description'],
                            'quantity': item['quantity'],
                            'amount': item['amount']
                        })

    # T·∫°o b·∫£ng d·ªØ li·ªáu cho rich
    table = Table(title=f'Chi ti√™u trong {num_weeks} tu·∫ßn g·∫ßn ƒë√¢y', title_style="bold blue")
    table.add_column("Tu·∫ßn", style="bold green")
    table.add_column("T·ªïng chi ti√™u (VNƒê)", style="bold magenta")

    for week_label, total in zip(week_labels, weekly_totals):
        # ƒê·ªïi m√†u tu·∫ßn hi·ªán t·∫°i
        if week_label == current_week_label:
            week_label = f"[bold red]{week_label}[/bold red]"
            total_str = f"[bold red]{total:,.0f}[/bold red]"
        else:
            total_str = f"{total:,.0f}"
        table.add_row(week_label, total_str)

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi rich
    console.print(table)

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt v·ªõi rich
    max_label_length = max(len(label) for label in week_labels)
    max_value = max(weekly_totals) if weekly_totals else 1

    bar_chart = ""
    for week_label in week_labels:
        value = weekly_totals[week_labels.index(week_label)]
        bar_length = int((value / max_value) * 40)  # Quy ƒë·ªãnh chi·ªÅu d√†i c·ªôt
        
        # ƒê·ªïi m√†u tu·∫ßn hi·ªán t·∫°i trong bi·ªÉu ƒë·ªì
        if week_label.strip("[/bold red]") == current_week_label.strip("[/bold red]"):
            bar_chart += f"[bold red]{week_label.ljust(max_label_length)} | {'‚ñà' * bar_length} {value:,.0f} VNƒê[/bold red]\n"
        else:
            bar_chart += f"{week_label.ljust(max_label_length)} | {'[yellow]' + '‚ñà' * bar_length + '[/]'} {value:,.0f} VNƒê\n"

    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·ªôt
    console.print(Panel(bar_chart, title="Bi·ªÉu ƒë·ªì c·ªôt chi ti√™u", title_align="left"))

    # Hi·ªÉn th·ªã chi ti·∫øt cho t·ª´ng tu·∫ßn
    for week_label in week_labels:
        console.print(f"\nChi ti·∫øt cho {week_label}:")
        week_expenses = weekly_expenses[week_label.strip("[/bold red]")]
        if week_expenses:
            print(format_expenses_table(week_expenses))
        else:
            print("Kh√¥ng c√≥ chi ti√™u n√†o trong tu·∫ßn n√†y.")

    # Th√™m ghi ch√∫ d∆∞·ªõi bi·ªÉu ƒë·ªì t·ªïng h·ª£p
    note = "Ghi ch√∫: Bi·ªÉu ƒë·ªì v√† b·∫£ng chi ti·∫øt cho chi ti√™u m·ªói tu·∫ßn trong 4 tu·∫ßn g·∫ßn ƒë√¢y."
    console.print(f"\n[note] {note}")

def calculate_monthly_totals(num_months=12):
    today = datetime.now().date()
    monthly_totals = []
    month_labels = []

    for i in range(num_months):
        # X√°c ƒë·ªãnh th√°ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
        start_of_month = (today.replace(day=1) - timedelta(days=i * 30)).replace(day=1)
        end_of_month = (start_of_month + timedelta(days=31)).replace(day=1) - timedelta(days=1)

        total_monthly = 0
        for user_expenses in expenses.values():
            for date_str, items in user_expenses.items():
                date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
                if start_of_month <= date_obj <= end_of_month:
                    for item in items:
                        total_monthly += item['amount']
        
        monthly_totals.append(total_monthly)
        month_labels.append(start_of_month.strftime('%m/%Y'))

    return monthly_totals[::-1], month_labels[::-1]  # ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ th√°ng g·∫ßn nh·∫•t l√™n ƒë·∫ßu
def plot_monthly_comparison(num_months=12):
    monthly_totals, month_labels = calculate_monthly_totals(num_months)
    
    # T·∫°o b·∫£ng d·ªØ li·ªáu cho rich
    table = Table(title=f'Chi ti√™u trong {num_months} th√°ng g·∫ßn ƒë√¢y', title_style="bold blue")

    table.add_column("Th√°ng", style="bold green")
    table.add_column("T·ªïng chi ti√™u (VNƒê)", style="bold magenta")

    # X√°c ƒë·ªãnh th√°ng hi·ªán t·∫°i
    current_month = datetime.now().strftime('%m/%Y')

    for month, total in zip(month_labels, monthly_totals):
        if month == current_month:
            table.add_row(f"[bold yellow]{month}[/bold yellow]", f"[bold yellow]{total:,.0f} VNƒê[/bold yellow]")
        else:
            table.add_row(month, f"{total:,.0f}")

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi rich
    console.print(table)

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt v·ªõi rich
    plot_data = {month: total for month, total in zip(month_labels, monthly_totals)}

    # T·∫°o bi·ªÉu ƒë·ªì c·ªôt v·ªõi rich
    bar_chart = ""
    max_label_length = max(len(label) for label in month_labels)
    max_value = max(monthly_totals)
    
    for month in month_labels:
        value = plot_data[month]
        bar_length = int((value / max_value) * 40)  # Quy ƒë·ªãnh chi·ªÅu d√†i c·ªôt

        if month == current_month:
            bar_chart += f"[bold yellow]{month.ljust(max_label_length)}[/bold yellow] | [bold yellow]{'‚ñà' * bar_length}[/bold yellow] [bold yellow]{value:,.0f} VNƒê[/bold yellow]\n"
        else:
            bar_chart += f"{month.ljust(max_label_length)} | {'‚ñà' * bar_length} {value:,.0f}\n"
    
    # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·ªôt
    console.print(Panel(bar_chart, title="Bi·ªÉu ƒë·ªì c·ªôt chi ti√™u", title_align="left"))

    # Th√™m ghi ch√∫ d∆∞·ªõi bi·ªÉu ƒë·ªì
    note = "Ghi ch√∫: Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ªïng chi ti√™u m·ªói th√°ng trong 12 th√°ng g·∫ßn ƒë√¢y."
    console.print(f"\n[note] {note}")


# T√≠nh chi ti√™u trong th√°ng
def monthly_expenses():
    today = datetime.now().date()
    total_monthly = 0
    monthly_expenses_list = []
    categories = []
    amounts = []

    # X√°c ƒë·ªãnh s·ªë ng√†y trong th√°ng hi·ªán t·∫°i t√≠nh ƒë·∫øn h√¥m nay
    days_in_month = today.day

    # T√≠nh ng√†y b·∫Øt ƒë·∫ßu v√† ng√†y k·∫øt th√∫c c·ªßa th√°ng tr∆∞·ªõc
    first_day_this_month = today.replace(day=1)
    last_day_previous_month = first_day_this_month - timedelta(days=1)
    first_day_previous_month = last_day_previous_month.replace(day=1)

    total_last_month = 0
    last_month_expenses = {}

    for user_expenses in expenses.values():
        for date_str, items in user_expenses.items():
            date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()

            # T√≠nh chi ti√™u cho th√°ng hi·ªán t·∫°i
            if date_obj.year == today.year and date_obj.month == today.month:
                if date_obj <= today:  
                    for item in items:
                        total_monthly += item['amount']
                        monthly_expenses_list.append({
                            'date': date_str,
                            'category': item['category'],
                            'description': item['description'],
                            'quantity': item['quantity'],
                            'amount': item['amount']
                        })
                        if item['category'] not in categories:
                            categories.append(item['category'])
                            amounts.append(item['amount'])
                        else:
                            index = categories.index(item['category'])
                            amounts[index] += item['amount']

            # T√≠nh chi ti√™u th√°ng tr∆∞·ªõc
            if first_day_previous_month <= date_obj <= last_day_previous_month:
                for item in items:
                    total_last_month += item['amount']
                    if item['category'] not in last_month_expenses:
                        last_month_expenses[item['category']] = item['amount']
                    else:
                        last_month_expenses[item['category']] += item['amount']

    print(f"Chi ti√™u th√°ng {today.strftime('%m/%Y')}:")

    if monthly_expenses_list:
        print(format_expenses_table(monthly_expenses_list))
        plot_expenses(categories, amounts, 'Chi ti√™u trong th√°ng')
        plot_monthly_comparison(12)
    else:
        print("Kh√¥ng c√≥ chi ti√™u n√†o trong th√°ng n√†y.")
    
    # T√≠nh chi ti√™u trung b√¨nh m·ªôt ng√†y trong 1 th√°ng
    average_daily_spending = total_monthly / days_in_month
    print(f"T·ªïng chi ti√™u th√°ng n√†y: {total_monthly:,} VNƒê")
    print(Fore.LIGHTMAGENTA_EX + f"Chi ti√™u trung b√¨nh m·ªói ng√†y trong th√°ng: {average_daily_spending:,.0f} VNƒê\n")

    # So s√°nh chi ti√™u th√°ng tr∆∞·ªõc v√† th√°ng hi·ªán t·∫°i
    difference = total_monthly - total_last_month
    if difference > 0:
        print(Fore.RED + f"B·∫°n ƒë√£ chi ti√™u nhi·ªÅu h∆°n th√°ng tr∆∞·ªõc {difference:,} VNƒê.")
    elif difference < 0:
        print(Fore.GREEN + f"B·∫°n ƒë√£ chi ti√™u √≠t h∆°n th√°ng tr∆∞·ªõc {abs(difference):,} VNƒê.")
    else:
        print(Fore.BLUE + "Chi ti√™u th√°ng n√†y kh√¥ng ƒë·ªïi so v·ªõi th√°ng tr∆∞·ªõc.")

    print(Fore.CYAN + f"T·ªïng chi ti√™u th√°ng tr∆∞·ªõc: {total_last_month:,} VNƒê\n")

# =================================================================
def yearly_expenses_by_day(year):
    start_date = datetime(year, 1, 1).date()
    end_date = datetime(year, 12, 31).date()
    daily_expenses = {}
    total_yearly = 0

    for user_expenses in expenses.values():
        for date_str, items in user_expenses.items():
            date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
            if start_date <= date_obj <= end_date:
                if date_str not in daily_expenses:
                    daily_expenses[date_str] = 0
                for item in items:
                    daily_expenses[date_str] += item['amount']
                    total_yearly += item['amount']

    dates = []
    amounts = []

    for date_str in sorted(daily_expenses.keys()):
        dates.append(date_str)
        amounts.append(daily_expenses[date_str])

    if not dates:
        print(f"Kh√¥ng c√≥ chi ti√™u n√†o trong nƒÉm {year}.")
        return

    # Apply color to the table title
    table = Table(title=f'[bold blue]Chi ti√™u h√†ng ng√†y trong nƒÉm {year}[/bold blue]', title_style="bold blue")
    table.add_column("[bold green]Ng√†y[/bold green]", style="bold green")
    table.add_column("[bold cyan]Th·ª©[/bold cyan]", style="bold cyan")
    table.add_column("[bold magenta]Chi ti√™u (VNƒê)[/bold magenta]", style="bold magenta")

    for date, amount in zip(dates, amounts):
        day_name_vn = weekday_translation.get(datetime.strptime(date, "%Y-%m-%d").strftime('%A'), "")
        table.add_row(date, day_name_vn, f"{amount:,.0f}")

    console.print(table)

    plot_data = {date: amount for date, amount in zip(dates, amounts)}
    
    max_value = max(amounts) if amounts else 0
    bar_chart = ""
    # Fix (ng√†y v√† th·ª©) c√≥ c√πng ƒë·ªô d√†i
    max_label_length = max(len(f"{date} ({weekday_translation[datetime.strptime(date, '%Y-%m-%d').strftime('%A')]})") for date in dates)

    color = "yellow"  # Ch·ªçn m√†u cho c·ªôt

    if max_value > 0:
        for date in dates:
            date_obj = datetime.strptime(date, "%Y-%m-%d")
            weekday_str = weekday_translation[date_obj.strftime('%A')]  # L·∫•y t√™n th·ª© trong tu·∫ßn
            label = f"{date} - {weekday_str}".ljust(max_label_length)  # Canh l·ªÅ tr√°i b·∫±ng c√°ch th√™m kho·∫£ng tr·∫Øng

            value = plot_data[date]
            bar_length = int((value / max_value) * 50)
            bar_chart += f"{label} | [bold {color}]{'‚ñà' * bar_length}[/bold {color}] {value:,.0f} VNƒê\n"
    else:
        bar_chart = "Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u ƒë·ªÉ hi·ªÉn th·ªã."

    # S·ª≠ d·ª•ng m√†u s·∫Øc cho bi·ªÉu ƒë·ªì
    bar_chart_colored = Text.from_markup(bar_chart)

    # Apply color to the panel title
    console.print(Panel(bar_chart_colored, title=f"[bold cyan]Bi·ªÉu ƒë·ªì c·ªôt chi ti√™u h√†ng ng√†y {year}[/bold cyan]", title_align="left"))

    note = f"Ghi ch√∫: Bi·ªÉu ƒë·ªì th·ªÉ hi·ªán t·ªïng chi ti√™u h√†ng ng√†y trong nƒÉm {year}."
    console.print(f"\n[italic yellow]{note}[/italic yellow]") 

def compare_years_expenses(year=None):
    if year is None:
        year = datetime.now().year

    previous_year = year - 1
    next_year = year + 1

    years_to_check = [previous_year, year, next_year]

    for y in years_to_check:
        print(f"\nChi ti√™u trong nƒÉm {y}:")
        yearly_expenses_by_day(y)

    def get_yearly_totals(year):
        start_date = datetime(year, 1, 1).date()
        end_date = datetime(year, 12, 31).date()
        total = 0
        for user_expenses in expenses.values():
            for date_str, items in user_expenses.items():
                date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
                if start_date <= date_obj <= end_date:
                    for item in items:
                        total += item['amount']
        return total

    totals = {y: get_yearly_totals(y) for y in years_to_check}

    totals = {y: total for y, total in totals.items() if total > 0}

    if not totals:
        print("Kh√¥ng c√≥ chi ti√™u n√†o trong c√°c nƒÉm g·∫ßn ƒë√¢y.")
        return

    table = Table(title=f"So s√°nh chi ti√™u h√†ng nƒÉm", title_style="bold blue")
    table.add_column("NƒÉm", style="bold green")
    table.add_column("T·ªïng chi ti√™u (VNƒê)", style="bold magenta")

    for y, total in totals.items():
        table.add_row(str(y), f"{total:,.0f}")

    console.print(table)

    max_value = max(totals.values()) if totals.values() else 0
    bar_chart = ""
    max_label_length = max(len(str(y)) for y in totals.keys())
    
    color = "cyan"  # Ch·ªçn m√†u cho c·ªôt

    if max_value > 0:
        for y, total in totals.items():
            bar_length = int((total / max_value) * 40)
            bar_chart += f"{str(y).ljust(max_label_length)} | {'‚ñà' * bar_length} {total:,.0f}\n"
    else:
        bar_chart = "Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u ƒë·ªÉ hi·ªÉn th·ªã."

    # S·ª≠ d·ª•ng m√†u s·∫Øc cho bi·ªÉu ƒë·ªì
    bar_chart_colored = Text.from_markup(f"[{color}] {bar_chart}[/]", style="bold")

    console.print(Panel(bar_chart_colored, title="Bi·ªÉu ƒë·ªì c·ªôt so s√°nh chi ti√™u h√†ng nƒÉm", title_align="left"))

    note = "Ghi ch√∫: Bi·ªÉu ƒë·ªì so s√°nh t·ªïng chi ti√™u h√†ng nƒÉm gi·ªØa ba nƒÉm g·∫ßn nh·∫•t."
    console.print(f"\n[note] {note}")

def yearly_expenses(year=None):
    if year is None:
        year = datetime.now().year

    today = datetime.now().date()
    total_yearly = 0
    yearly_expenses_list = []
    categories = []
    amounts = []

    # X√°c ƒë·ªãnh s·ªë ng√†y trong nƒÉm t√≠nh ƒë·∫øn ng√†y h√¥m nay
    days_in_year = (today - datetime(year, 1, 1).date()).days + 1

    last_year = year - 1
    total_last_year = 0
    last_year_expenses = {}

    for user_expenses in expenses.values():
        for date_str, items in user_expenses.items():
            date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
            if date_obj.year == year:
                if date_obj <= today:  
                    for item in items:
                        total_yearly += item['amount']
                        yearly_expenses_list.append({
                            'date': date_str,
                            'category': item['category'],
                            'description': item['description'],
                            'quantity': item['quantity'],
                            'amount': item['amount']
                        })
                        if item['category'] not in categories:
                            categories.append(item['category'])
                            amounts.append(item['amount'])
                        else:
                            index = categories.index(item['category'])
                            amounts[index] += item['amount']

            # T√≠nh chi ti√™u nƒÉm tr∆∞·ªõc
            if date_obj.year == last_year:
                for item in items:
                    total_last_year += item['amount']
                    if item['category'] not in last_year_expenses:
                        last_year_expenses[item['category']] = item['amount']
                    else:
                        last_year_expenses[item['category']] += item['amount']
    print(f"Chi ti√™u trong nƒÉm {year}:")

    if yearly_expenses_list:
        print(format_expenses_table(yearly_expenses_list))
        plot_expenses(categories, amounts, f'Chi ti√™u trong nƒÉm {year}')
        compare_years_expenses()
    else:
        print(f"Kh√¥ng c√≥ chi ti√™u n√†o trong nƒÉm {year}.")
    
    # T√≠nh trung b√¨nh chi ti√™u m·ªôt ng√†y trong nƒÉm
    average_daily_spending = total_yearly / days_in_year
    print(f"T·ªïng chi ti√™u nƒÉm: {total_yearly:,} VNƒê")
    print(Fore.LIGHTMAGENTA_EX + f"Chi ti√™u trung b√¨nh m·ªói ng√†y trong nƒÉm: {average_daily_spending:,.0f} VNƒê\n")

    # So s√°nh chi ti√™u nƒÉm tr∆∞·ªõc v·ªõi nƒÉm hi·ªán t·∫°i
    difference = total_yearly - total_last_year
    if difference > 0:
        print(Fore.RED + f"B·∫°n ƒë√£ chi ti√™u nhi·ªÅu h∆°n nƒÉm tr∆∞·ªõc {difference:,} VNƒê.")
    elif difference < 0:
        print(Fore.GREEN + f"B·∫°n ƒë√£ chi ti√™u √≠t h∆°n nƒÉm tr∆∞·ªõc {abs(difference):,} VNƒê.")
    else:
        print(Fore.GREEN + "Chi ti√™u nƒÉm n√†y kh√¥ng ƒë·ªïi so v·ªõi nƒÉm tr∆∞·ªõc.")

    print(Fore.CYAN + f"T·ªïng chi ti√™u nƒÉm tr∆∞·ªõc: {total_last_year:,} VNƒê\n")


# T√≠nh to√°n trong kinh doanh
def add_product():
    menu = load_menu()

    while True:
        product_name = input("Nh·∫≠p t√™n s·∫£n ph·∫©m: ")
        if not product_name.isalpha():
            print("T√™n s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
            continue

        product_price = input("Nh·∫≠p gi√° s·∫£n ph·∫©m (VNƒê): ")
        try:
            product_price = float(product_price)
            if product_price <= 0:
                print("Gi√° s·∫£n ph·∫©m ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng nh·∫≠p l·∫°i.")
                continue
        except ValueError:
            print("Gi√° s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
            continue

        break

    menu[product_name] = {
        "price": product_price,
        "stock": 0  # Initial stock is set to 0
    }

    save_menu(menu)
    print(f"ƒê√£ th√™m s·∫£n ph·∫©m: {product_name} v·ªõi gi√° {product_price:,} VNƒê v√†o menu.")
# Add stock to existing products
def add_stock():
    menu = load_menu()
    
    if not menu:
        print("Menu hi·ªán ƒëang tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc.")
        return

    questions = [
        inquirer.List(
            'product',
            message="Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën th√™m s·ªë l∆∞·ª£ng",
            choices=list(menu.keys()),
        )
    ]
    answer = inquirer.prompt(questions)
    product_name = answer['product']

    quantity = int(input(f"Nh·∫≠p s·ªë l∆∞·ª£ng th√™m v√†o cho {product_name}: "))
    menu[product_name]['stock'] += quantity

    save_menu(menu)
    print(f"ƒê√£ th√™m {quantity} v√†o s·ªë l∆∞·ª£ng c·ªßa {product_name}. S·ªë l∆∞·ª£ng hi·ªán t·∫°i: {menu[product_name]['stock']}")
# View the menu
def view_menu():
    menu = load_menu()

    if not menu:
        print("Menu hi·ªán ƒëang tr·ªëng.")
        return

    # T·∫°o danh s√°ch h√†ng cho b·∫£ng
    table = []
    for product_name, details in menu.items():
        table.append([
            f"{Fore.CYAN}{product_name}{Style.RESET_ALL}",
            f"{Fore.GREEN}{details['price']:,}{Style.RESET_ALL}",
            f"{Fore.YELLOW}{details['stock']}{Style.RESET_ALL}"
        ])

    # T·∫°o ti√™u ƒë·ªÅ cho b·∫£ng
    headers = [
        f"{Fore.MAGENTA}T√™n s·∫£n ph·∫©m{Style.RESET_ALL}",
        f"{Fore.MAGENTA}Gi√° (VNƒê){Style.RESET_ALL}",
        f"{Fore.MAGENTA}S·ªë l∆∞·ª£ng t·ªìn kho{Style.RESET_ALL}"
    ]

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi tabulate
    print(tabulate(table, headers=headers, tablefmt='rounded_outline'))
# Record a sale
def record_sale():
    menu = load_menu()

    if not menu:
        print("Menu hi·ªán ƒëang tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m tr∆∞·ªõc.")
        return

    questions = [
        inquirer.List(
            'product',
            message="Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën b√°n",
            choices=list(menu.keys()),
        )
    ]
    answer = inquirer.prompt(questions)
    product_name = answer['product']

    available_stock = menu[product_name]['stock']
    if available_stock <= 0:
        print(f"S·∫£n ph·∫©m {product_name} hi·ªán ƒë√£ h·∫øt h√†ng.")
        return

    quantity_sold = int(input(f"Nh·∫≠p s·ªë l∆∞·ª£ng b√°n ra (t·ªìn kho hi·ªán t·∫°i: {available_stock}): "))
    
    if quantity_sold > available_stock:
        print("S·ªë l∆∞·ª£ng b√°n ra kh√¥ng ƒë·ªß t·ªìn kho. Vui l√≤ng nh·∫≠p l·∫°i.")
        return
    
    # Update the stock
    menu[product_name]['stock'] -= quantity_sold
    total_sale = quantity_sold * menu[product_name]['price']
    
    save_menu(menu)
    print(f"ƒê√£ b√°n {quantity_sold} {product_name} v·ªõi t·ªïng s·ªë ti·ªÅn {total_sale:,.0f} VNƒê.")
    
    # Add sale information to the expense record
    date_str = datetime.now().strftime("%Y-%m-%d")
    if date_str not in expenses:
        expenses[date_str] = []

    expenses[date_str].append({
        'category': 'Doanh thu b√°n h√†ng',
        'description': f"B√°n {quantity_sold} {product_name}",
        'quantity': quantity_sold,
        'amount': total_sale
    })
    print(f"ƒê√£ ghi nh·∫≠n doanh thu v√†o chi ti√™u ng√†y {date_str}.")
def calculate_sales_last_4_weeks():
    today = datetime.now().date()
    sales_last_4_weeks = []
    sales_details = {}

    for i in range(4):
        start_of_week = today - timedelta(days=today.weekday() + i * 7)
        end_of_week = start_of_week + timedelta(days=6)
        week_label = f"Tu·∫ßn {start_of_week.strftime('%d/%m')} - {end_of_week.strftime('%d/%m')}"

        total_sales = 0
        product_sales = {}

        for date_str, items in expenses.items():
            try:
                date_obj = datetime.strptime(date_str, "%Y-%m-%d").date()
            except ValueError:
                print(f"Warning: B·ªè qua d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá {date_str}")
                continue

            if start_of_week <= date_obj <= end_of_week:
                for item in items:
                    if item['category'] == 'Doanh thu b√°n h√†ng':
                        total_sales += item['amount']
                        product_name = item['description'].split(" ")[1]
                        product_sales[product_name] = product_sales.get(product_name, 0) + item['quantity']

        sales_last_4_weeks.append((week_label, total_sales))
        sales_details[week_label] = product_sales

    # Reverse the list and maintain dictionary order
    sales_last_4_weeks = sales_last_4_weeks[::-1]
    sales_details = dict(reversed(list(sales_details.items())))

    return sales_last_4_weeks, sales_details
def find_best_selling_product(sales_details):
    product_sales_count = {}

    for week_sales in sales_details.values():
        for product_name, quantity_sold in week_sales.items():
            product_sales_count[product_name] = product_sales_count.get(product_name, 0) + quantity_sold

    # Check if product_sales_count is empty
    if not product_sales_count:
        return "Ch∆∞a c√≥ d·ªØ li·ªáu b√°n h√†ng", 0

    best_selling_product = max(product_sales_count, key=product_sales_count.get)
    return best_selling_product, product_sales_count[best_selling_product]
def view_sales_statistics():
    sales_last_4_weeks, sales_details = calculate_sales_last_4_weeks()

    table = Table(title="Doanh thu trong 4 tu·∫ßn g·∫ßn ƒë√¢y", title_style="bold blue")
    table.add_column("Tu·∫ßn", style="bold green")
    table.add_column("T·ªïng doanh thu (VNƒê)", style="bold magenta")

    for week_label, total_sales in sales_last_4_weeks:
        table.add_row(week_label, f"{total_sales:,.0f}")

    console.print(table)

    # T√¨m s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t
    best_selling_product, quantity_sold = find_best_selling_product(sales_details)
    console.print(f"S·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t: [bold red]{best_selling_product}[/bold red] v·ªõi [bold yellow]{quantity_sold}[/bold yellow] s·∫£n ph·∫©m b√°n ra trong 4 tu·∫ßn qua.")
    
    # Th√™m chi ti·∫øt s·∫£n ph·∫©m b√°n ra trong t·ª´ng tu·∫ßn
    for week_label, product_sales in sales_details.items():
        console.print(f"\nChi ti·∫øt s·∫£n ph·∫©m b√°n ra trong {week_label}:")
        if product_sales:
            for product, quantity in product_sales.items():
                print(f"{product}: {quantity} s·∫£n ph·∫©m")
        else:
            print("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c b√°n trong tu·∫ßn n√†y.")


# Cho l·ªùi khuy√™n chi ti√™u n·∫øu kh√¥ng h·ª£p l√Ω th√¨ s·∫Ω th√¥ng b√°o
def give_spending_advice(expenses):
    # T·ªïng h·ª£p chi ti√™u theo t·ª´ng lo·∫°i v√† t·ª´ng th√°ng
    monthly_category_totals = defaultdict(lambda: defaultdict(float))
    
    for user, dates in expenses.items():
        for date, expense_list in dates.items():
            year_month = datetime.strptime(date, '%Y-%m-%d').strftime('%Y-%m')  # Ch·ªâ l·∫•y nƒÉm v√† th√°ng
            for expense in expense_list:
                category = expense['category']
                amount = expense['amount']
                monthly_category_totals[year_month][category] += amount

    # ƒê∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n chi ti√™u
    advice = []

    # Gi·∫£ s·ª≠ c√°c m·ª©c chi ti√™u h·ª£p l√Ω (VNƒê) cho m·ªói th√°ng
    reasonable_limits = {
        "ƒêi ch·ª£ si√™u th·ªã": 2000000,
        "Nh√† h√†ng": 1000000,
        "Chi tr·∫£ h√≥a ƒë∆°n": 1000000,
        "Ti·ªÅn nh√†": 2000000,
        "ƒêi l·∫°i": 1000000,
        "Vui ch∆°i gi·∫£i tr√≠": 500000,
        "Mua s·∫Øm": 1000000,
        "Gi√°o d·ª•c": 2000000,
        "Y t·∫ø": 1000000, # kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
        "B·∫£o hi·ªÉm": 2000000,
        "Ti·∫øt ki·ªám": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n, n√™n ti·∫øt ki·ªám c√†ng nhi·ªÅu c√†ng t·ªët
        "Ch·ª©ng kho√°n": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª• th·ªÉ
        "B·∫•t ƒë·ªông s·∫£n": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª• th·ªÉ
        "Qu·ªπ": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª• th·ªÉ
        "S·ª± ki·ªán": 1000000,
        "Bi·∫øu t·∫∑ng": 500000,
        "D·ªãch v·ª• c√¥ng": 500000,
    }

    for year_month, category_totals in monthly_category_totals.items():
        for category, total in category_totals.items():
            if category in reasonable_limits:
                limit = reasonable_limits[category]
                if total > limit and limit != 0:
                    advice.append(
                        Fore.RED + f"Th√°ng {year_month} - Chi ti√™u cho {category} ({total:,} VNƒê) v∆∞·ª£t m·ª©c h·ª£p l√Ω ({limit:,} VNƒê). B·∫°n n√™n c√¢n nh·∫Øc gi·∫£m chi ti√™u ·ªü h·∫°ng m·ª•c n√†y."
                    )
                elif limit == 0 and total > 0:
                    advice.append(
                       Fore.YELLOW + f"Th√°ng {year_month} - B·∫°n ƒë√£ chi ti√™u {total:,} VNƒê cho {category}. H√£y ƒë·∫£m b·∫£o r·∫±ng c√°c kho·∫£n chi n√†y l√† c·∫ßn thi·∫øt."
                    )

    if not advice:
        advice.append(Fore.GREEN + "Chi ti√™u c·ªßa b·∫°n trong c√°c h·∫°ng m·ª•c hi·ªán t·∫°i ƒëang h·ª£p l√Ω. Ti·∫øp t·ª•c duy tr√¨!")

    return advice

# In ra l·ªùi khuy√™n
advice = give_spending_advice(expenses)
for line in advice:
    print(line + "\n")

# Ch·∫°y menu ch√≠nh
main_menu()

