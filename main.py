from imports import *
from utils import *
# -*- coding: utf-8 -*-
from business.business_menu import business_menu
from expenses.expense_menu import expense_menu
from savings.savings_menu import savings_menu

# ================================================================================
# Dictionary to store expenses

# In ra l·ªùi ch√†o ƒë·∫ßu 
art = pyfiglet.figlet_format('Zero Spending', font='standard')
dateTimes = pyfiglet.figlet_format(dt_string, font='banner3')
colors = [Fore.LIGHTRED_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTCYAN_EX, Fore.LIGHTWHITE_EX]

# Check gi·ªù ƒë·ªÉ in l·ªùi ch√†o s√°ng, chi·ªÅu, t·ªëi
def get_greeting():
    if 5 <= current_hour < 12:
        return 'Ch√†o bu·ªïi s√°ng, ch√∫c b·∫°n bu·ªïi s√°ng t·ªët l√†nh! üòÜ'
    elif 12 <= current_hour < 18:
        return 'Ch√†o bu·ªïi chi·ªÅu, ch√∫c b·∫°n bu·ªïi chi·ªÅu vui v·∫ª! üòÅ'
    else:
        return 'Ch√†o bu·ªïi t·ªëi, ch√∫c b·∫°n bu·ªïi t·ªëi th∆∞ gi√£n! üòÆ‚Äçüí®'


colored_line = ''.join(random.choice(colors) + '=' for _ in range(68))
end_line = ''.join(random.choice(colors) + '*' for _ in range(68))

print(colored_line)

# In t·ª´ng k√Ω t·ª± c·ªßa ch·ªØ ngh·ªá thu·∫≠t v·ªõi m√†u ng·∫´u nhi√™n
print(Style.BRIGHT + art)
print(dateTimes)
# In d√≤ng cu·ªëi c√πng v·ªõi m√†u ng·∫´u nhi√™n
print(colored_line)
# In ra l·ªùi ch√†o
print(get_greeting(), Fore.CYAN + dt_string + '\n')

# D·ª± b√°o th·ªùi ti·∫øt ho·∫∑c c√°i g√¨ ƒë√≥ ƒë·∫°i lo·∫°i v·∫≠y 
# ==============================

# Menu cho ng∆∞·ªùi d√πng ch·ªçn ch·ª©c nƒÉng
def main_menu():
    while True:
        # Menu ch√≠nh ƒë·ªÉ ch·ªçn nh√≥m ch·ª©c nƒÉng
        main_choices = [
            "Kinh doanh",
            "Ki·ªÉm so√°t chi ti√™u [BEST]",
            #ü™ô "Gi√° v√†ng",
            "Ti·∫øt ki·ªám",
            #‚òÅÔ∏è "Th·ªùi ti·∫øt",
            "‚ùå Tho√°t"
        ]

        main_questions = [
            inquirer.List(
                'main_choice',
                message= 5*'*' + " Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën th·ª±c hi·ªán "  + 5*'*',
                choices=main_choices,
            )
        ]

        main_answer = inquirer.prompt(main_questions)

        if main_answer['main_choice'] == "Kinh doanh":
            business_menu()
        elif main_answer['main_choice'] == "Ki·ªÉm so√°t chi ti√™u [BEST]":
            expense_menu()
        elif main_answer['main_choice'] == "Ti·∫øt ki·ªám":
            savings_menu()  
        elif main_answer['main_choice'] == "‚ùå Tho√°t":
            print(end_line)
            print(10*'=' + " | C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh! | " + 10*'=')
            print(end_line + '\n')
            break

# Cho l·ªùi khuy√™n chi ti√™u n·∫øu kh√¥ng h·ª£p l√Ω th√¨ s·∫Ω th√¥ng b√°o
def give_spending_advice(expenses):
    # T·ªïng h·ª£p chi ti√™u theo t·ª´ng lo·∫°i v√† t·ª´ng th√°ng
    monthly_category_totals = defaultdict(lambda: defaultdict(float))
    
    for user, dates in expenses.items():
        for date, expense_list in dates.items():
            year_month = datetime.strptime(date, '%Y-%m-%d').strftime('%Y-%m')  # Ch·ªâ l·∫•y nƒÉm v√† th√°ng
            for expense in expense_list:
                category = expense['category']
                amount = expense['amount']
                monthly_category_totals[year_month][category] += amount

    # ƒê∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n chi ti√™u
    advice = []

    # Gi·∫£ s·ª≠ c√°c m·ª©c chi ti√™u h·ª£p l√Ω (VNƒê) cho m·ªói th√°ng
    reasonable_limits = {
        "ƒêi ch·ª£ si√™u th·ªã": 2000000,
        "Nh√† h√†ng": 1000000,
        "Chi tr·∫£ h√≥a ƒë∆°n": 1000000,
        "Ti·ªÅn nh√†": 2500000,
        "ƒêi l·∫°i": 1000000,
        "Vui ch∆°i gi·∫£i tr√≠": 500000,
        "Mua s·∫Øm": 1000000,
        "Gi√°o d·ª•c": 2000000,
        "Y t·∫ø": 1000000, # kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
        "B·∫£o hi·ªÉm": 2000000,
        "Ti·∫øt ki·ªám": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n, n√™n ti·∫øt ki·ªám c√†ng nhi·ªÅu c√†ng t·ªët
        "Ch·ª©ng kho√°n": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª• th·ªÉ
        "B·∫•t ƒë·ªông s·∫£n": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª• th·ªÉ
        "Qu·ªπ": 0,  # Kh√¥ng c√≥ gi·ªõi h·∫°n c·ª• th·ªÉ
        "S·ª± ki·ªán": 1000000,
        "Bi·∫øu t·∫∑ng": 500000,
        "D·ªãch v·ª• c√¥ng": 500000,
    }

    for year_month, category_totals in monthly_category_totals.items():
        for category, total in category_totals.items():
            if category in reasonable_limits:
                limit = reasonable_limits[category]
                if total > limit and limit != 0:
                    advice.append(
                        Fore.RED + f"Th√°ng {year_month} - Chi ti√™u cho {category} ({total:,} VNƒê) v∆∞·ª£t m·ª©c h·ª£p l√Ω ({limit:,} VNƒê). B·∫°n n√™n c√¢n nh·∫Øc gi·∫£m chi ti√™u ·ªü h·∫°ng m·ª•c n√†y."
                    )
                elif limit == 0 and total > 0:
                    advice.append(
                       Fore.YELLOW + f"Th√°ng {year_month} - B·∫°n ƒë√£ chi ti√™u {total:,} VNƒê cho {category}. H√£y ƒë·∫£m b·∫£o r·∫±ng c√°c kho·∫£n chi n√†y l√† c·∫ßn thi·∫øt."
                    )

    if not advice:
        advice.append(Fore.GREEN + "Chi ti√™u c·ªßa b·∫°n trong c√°c h·∫°ng m·ª•c hi·ªán t·∫°i ƒëang h·ª£p l√Ω. Ti·∫øp t·ª•c duy tr√¨!")

    return advice

# In ra l·ªùi khuy√™n
advice = give_spending_advice(expenses)
for line in advice:
    print(line + "\n")

# Ch·∫°y menu ch√≠nh
main_menu()

