from imports import *

# H√†m t√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn s·ª± ki·ªán
def days_until_tet(event_date):
    today = datetime.now()
    this_year_event_date = datetime(today.year, event_date.month, event_date.day)
    
    if today > this_year_event_date:
        # N·∫øu h√¥m nay ƒë√£ qua ng√†y s·ª± ki·ªán c·ªßa nƒÉm nay, t√≠nh ƒë·∫øn nƒÉm sau
        next_event_date = datetime(today.year + 1, event_date.month, event_date.day)
    else:
        # N·∫øu ch∆∞a ƒë·∫øn ng√†y s·ª± ki·ªán c·ªßa nƒÉm nay, t√≠nh ƒë·∫øn ng√†y s·ª± ki·ªán nƒÉm nay
        next_event_date = this_year_event_date
    
    days_left = (next_event_date - today).days
    return days_left, next_event_date.year, this_year_event_date.strftime('%d/%m/%Y')


# H√†m t√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Gi√°ng Sinh
def days_until_christmas():
    today = datetime.now()
    christmas_date = datetime(today.year, 12, 25)  # Ng√†y Gi√°ng Sinh

    if today > christmas_date:
        christmas_date = datetime(today.year + 1, 12, 25)  # N·∫øu ƒë√£ qua Gi√°ng Sinh, t√≠nh nƒÉm sau

    days_left = (christmas_date - today).days
    return days_left, christmas_date.year, christmas_date.strftime('%d/%m/%Y')

# H√†m t√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Qu·ªëc Kh√°nh
def days_until_independence_day():
    today = datetime.now()
    independence_day_date = datetime(today.year, 9, 2)  # Ng√†y Qu·ªëc Kh√°nh

    if today > independence_day_date:
        independence_day_date = datetime(today.year + 1, 9, 2)  # N·∫øu ƒë√£ qua Qu·ªëc Kh√°nh, t√≠nh nƒÉm sau
    days_left = (independence_day_date - today).days
    
    return days_left, independence_day_date.year, independence_day_date.strftime('%d/%m/%Y')

# H√†m t√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Halloween
def days_until_halloween():
    today = datetime.now()
    halloween_date = datetime(today.year, 10, 31)  # Ng√†y Halloween

    # N·∫øu h√¥m nay ƒë√£ qua ng√†y 31 th√°ng 10, t√≠nh ng√†y Halloween c·ªßa nƒÉm sau
    if today > halloween_date:
        halloween_date = datetime(today.year + 1, 10, 31)
    days_left = (halloween_date - today).days

    return days_left, halloween_date.year, halloween_date.strftime('%d/%m/%Y')



# Load c√†i ƒë·∫∑t theme
theme_settings = load_theme_settings()
selected_color = eval(theme_settings.get("color", "Fore.LIGHTRED_EX"))  
selected_font = theme_settings.get("art_style", "standard")  
program_name = theme_settings.get("program_name", "Zero Spending") 
use_random_colors = theme_settings.get("use_random_colors", False)  
show_time = theme_settings.get("show_time", True) 
time_font_style = theme_settings.get("time_font_style", "banner3")  
change_title_color = theme_settings.get("change_title_color", False) 
title_color_choice = theme_settings.get("title_color_choice", "Kh√¥ng ƒë·ªïi m√†u (tr·∫Øng)")  
time_format = theme_settings.get("time_format", "both")

# T·∫°o ch·ªØ ACII t·ª´ t√™n ch∆∞∆°ng tr√¨nh
art = pyfiglet.figlet_format(program_name, font=selected_font)
colored_message = ""

# H√†m ƒë·ªÉ l·∫•y ƒë·ªãnh d·∫°ng th·ªùi gian d·ª±a tr√™n c√†i ƒë·∫∑t
def get_formatted_time():
    now = datetime.now()
    if time_format == "time":
        return pyfiglet.figlet_format(now.strftime('%H:%M:%S'), font=time_font_style)
    elif time_format == "date":
        return pyfiglet.figlet_format(now.strftime('%d/%m/%Y'), font=time_font_style)
    elif time_format == "both":
        return pyfiglet.figlet_format(now.strftime('%d/%m/%Y %H:%M:%S'), font=time_font_style)
    return ""

dateTimes = get_formatted_time() if show_time else ""
# ====================


#  Ng√†y T·∫øt √Çm L·ªãch (v√≠ d·ª•, 10/2/2024, b·∫°n c·∫ßn thay ƒë·ªïi t√πy theo nƒÉm)
tet_date = datetime(2024, 2, 10)  


# ====================

days_left_display = ""
# Ki·ªÉm tra theme v√† t√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn s·ª± ki·ªán
if theme_settings.get("program_name") == "Tet": 
    days_left, year,next_event = days_until_tet(tet_date)  # T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn T·∫øt
    days_left_display = f"Ng√†y T·∫øt: {tet_date.strftime('%d/%m/%Y')}\nC√≤n {days_left} ng√†y n·ªØa ƒë·∫øn T·∫øt √Çm L·ªãch nƒÉm {year}! üßß"
    new_year_message = pyfiglet.figlet_format("Nam Moi Binh An!", font="digital")  
    next_event_display = f"\nT·∫øt Nguy√™n ƒê√°n s·∫Ω di·ªÖn ra v√†o ng√†y: {next_event}! üéá"

    colors = [Fore.LIGHTRED_EX, Fore.LIGHTYELLOW_EX]  # ƒê·ªè v√† V√†ng

    for i, char in enumerate(new_year_message):
        # Xen k·∫Ω gi·ªØa hai m√†u
        colored_message += colors[i % 2] + char

    # Reset m√†u sau khi in
    colored_message += Style.RESET_ALL
    print(colored_message)

# T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Gi√°ng Sinh
elif theme_settings.get("program_name") == "Christmas":  
    days_left, year, next_event = days_until_christmas()  # T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Gi√°ng Sinh
    days_left_display = f"H√¥m nay l√†: {datetime.now().strftime('%d/%m/%Y')}\nC√≤n {days_left} ng√†y n·ªØa ƒë·∫øn Gi√°ng Sinh nƒÉm {year}! üéÑ"
    christmas_message = pyfiglet.figlet_format("merry Chirsmarrk!", font="pyramid", width = 120 )  
    next_event_display = f"\nGi√°nh Sinh s·∫Ω di·ªÖn ra v√†o ng√†y: {next_event}! ‚ùÑÔ∏è"

    colors = [Fore.LIGHTCYAN_EX, Fore.LIGHTWHITE_EX]  # xanh v√† tr·∫Øng
    
    for i, char in enumerate(christmas_message):
        # Xen k·∫Ω gi·ªØa hai m√†u
        colored_message += colors[i % 2] + char

    # Reset m√†u sau khi in
    colored_message += Style.RESET_ALL
    print(colored_message)


# T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Qu·ªëc Kh√°nh
elif theme_settings.get("program_name") == "Quoc Khanh":  
    days_left, year, next_event = days_until_independence_day()  # T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Qu·ªëc Kh√°nh
    days_left_display = f"H√¥m nay l√†: {datetime.now().strftime('%d/%m/%Y')}\nC√≤n {days_left} ng√†y n·ªØa ƒë·∫øn Qu·ªëc Kh√°nh nƒÉm {year}! üéä"
    independence_day = pyfiglet.figlet_format("02/09/1945", font="larry3d", width = 120 )  
    next_event_display = f"\nQu·ªëc Kh√°nh s·∫Ω di·ªÖn ra v√†o ng√†y: {next_event}! üéâ"

    colors = [Fore.LIGHTRED_EX, Fore.LIGHTYELLOW_EX]  # ƒê·ªè v√† V√†ng

    for i, char in enumerate(independence_day):
        # Xen k·∫Ω gi·ªØa hai m√†u
        colored_message += colors[i % 2] + char

    # Reset m√†u sau khi in
    colored_message += Style.RESET_ALL
    print(colored_message)

# T√≠nh s·ªë ng√†y c√≤n l·∫°i ƒë·∫øn Halloween
elif theme_settings.get("program_name") == "Halloween":  
    days_left, year, next_event = days_until_halloween()
    days_left_display = f"H√¥m nay l√†: {datetime.now().strftime('%d/%m/%Y')}\nC√≤n {days_left} ng√†y n·ªØa ƒë·∫øn Halloween nƒÉm {year}! üëª"
    halloween_message = pyfiglet.figlet_format("Happy Halloween", font="poison" , width = 120)  
    next_event_display = f"\nHalloween s·∫Ω di·ªÖn ra v√†o ng√†y: {next_event}! üéÉ"

    colored_message = ""
    colors = [Fore.LIGHTMAGENTA_EX, Fore.LIGHTYELLOW_EX]  # t√≠m v√† V√†ng

    for i, char in enumerate(halloween_message):
        # Xen k·∫Ω gi·ªØa hai m√†u
        colored_message += colors[i % 2] + char

    # Reset m√†u sau khi in
    colored_message += Style.RESET_ALL
    print(colored_message)


# N·∫øu s·ª≠ d·ª•ng m√†u ng·∫´u nhi√™n, ch·ªçn ng·∫´u nhi√™n t·ª´ danh s√°ch
if use_random_colors:
    colors = [Fore.LIGHTRED_EX, Fore.LIGHTGREEN_EX, Fore.LIGHTYELLOW_EX, Fore.LIGHTBLUE_EX, Fore.LIGHTMAGENTA_EX, Fore.LIGHTCYAN_EX, Fore.LIGHTWHITE_EX]
    colored_line = ''.join(random.choice(colors) + '=' for _ in range(68))
    end_line = ''.join(random.choice(colors) + '*' for _ in range(68))

# theme theo m√πa 
elif len(colored_message) > 1:
    colored_line = ''.join(random.choice(colors)  + '=' for _ in range(68))
    end_line = ''.join(random.choice(colors) + '*' for _ in range(68))

# theme custom
else:
    colored_line = ''.join(selected_color  + '=' for _ in range(68))
    end_line = ''.join(selected_color  + '*' for _ in range(68))


print(colored_line)

# Ki·ªÉm tra user c√≥ ch·ªçn ƒë·ªïi m√†u ti√™u ƒë·ªÅ kh√¥ng v√† th·ª±c hi·ªán theo l·ª±a ch·ªçn
if change_title_color:
    if title_color_choice == "Kh√¥ng ƒë·ªïi m√†u (tr·∫Øng)":
        print(Fore.LIGHTWHITE_EX + art)
    elif title_color_choice == "S·ª≠ d·ª•ng m√†u ƒë·∫°i di·ªán":
        print(selected_color + art)  
    elif title_color_choice == "S·ª≠ d·ª•ng m√†u ng·∫´u nhi√™n":
        random_title_color = ''.join(random.choice(colors) + letter for letter in art)
        print(random_title_color)
else:
    print(selected_color + art)

if show_time:
    print(dateTimes)

if days_left_display:
    print(selected_color + days_left_display + next_event_display + Style.RESET_ALL)
    

print(colored_line)
